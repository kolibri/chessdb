---
- hosts: all
  vars:
    hostname: "{{ ansible_hostname }}"
    doc_root: "/srv/share/web"

    front_controller: app_dev.php
    var_dir: /dev/shm/var
    mysql_user:
      name: chessdb
      pass: chessdb
      priv: "*.*:ALL"

    php_ini:
      - "error_reporting=E_ALL|E_STRICT"
      - "display_errors=On"
      - "date.timezone={{ php_timezone|default('Europe/Berlin') }}"
      - "xdebug.max_nesting_level=256"
      - "xdebug.remote_enable = 1"
      - "xdebug.remote_connect_back=1"
      - "xdebug.remote_port = 9000"
      - "xdebug.scream=0"
      - "xdebug.show_local_vars=1"
      - "xdebug.idekey=PHPSTORM"

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted

    - name: restart fpm
      service:
        name: php7.0-fpm
        state: restarted

  tasks:
    - block:
      # - name: add php ppa
      #   apt_repository:
      #     repo: "ppa:ondrej/php"

      - name: install packages
        apt:
          name: "{{ item }}"
          state: latest
          update_cache: yes
        with_items:
          - acl
          - curl
          - php
          - php-cli
          - php-curl
          - php-gd
          - php-intl
          - php-xml
          - php-zip
          - php-mbstring
          - php-sqlite3
          - nginx
          - php-fpm
          - php-mysql
          - mysql-server
          - mysql-client
          - python-mysqldb
          - git
          - php-xdebug
          - nodejs
          - npm
        notify:
          - restart fpm
          - restart nginx

      - name: php.ini settings
        lineinfile:
          dest: /etc/php/7.0/cli/php.ini
          line: "{{ item }}"
        with_items: "{{ php_ini }}"
        notify:
          - restart fpm
          - restart nginx

      - name: link nodejs to node
        file:
          src: /usr/bin/nodejs
          dest: /usr/bin/node
          state: link
      - name: install npm packages
        npm:
          name: gulp-cli
          global: true

      - name:
        file:
          path: /var/ssl
          state: directory

      - name: create self-signed SSL cert
        command: openssl req -new -nodes -x509 -subj "/C=US/ST=Oregon/L=Portland/O=IT/CN=${ansible_fqdn}" -days 3650 -keyout /var/ssl/server.key -out /var/ssl/server.crt -extensions v3_ca creates=/var/ssl/server.crt
        notify: restart nginx

      - name: install vhost template
        template:
          src: "nginx_vhost_simple.j2"
          dest: /etc/nginx/sites-available/default
        notify:
          - restart nginx
          - restart fpm

      - name: php.ini settings
        lineinfile:
          dest: /etc/php/7.0/fpm/php.ini
          line: "{{ item }}"
        with_items: "{{ php_ini }}"
        notify:
          - restart nginx
          - restart fpm

      - name: start and enable fpm
        service:
          name: php7.0-fpm
          state: started
          enabled: true

      - name: start and enable nginx
        service:
          name: nginx
          state: started
          enabled: true


      - name: add mysql user
        mysql_user:
          name: "{{ mysql_user.name }}"
          password: "{{ mysql_user.pass }}"
          priv: "{{ mysql_user.priv }}"


      - name: ensure var dir exists
        file:
          path: "{{ item }}"
          state: directory
        with_items: 
          - "{{ var_dir }}"
          - "{{ var_dir }}/sessions"

      - name: ensure var dir is writable
        acl:
          path: "{{ var_dir }}"
          entity: "{{ item[0] }}"
          etype: user
          permissions: "rwx"
          state: present
          recursive: true
          default: "{{ item[1] }}"
        with_nested:
          - ["{{ ansible_user_id }}", "www-data"]
          - [false, true]

      - name: check if composer is installed
        stat:
          path: /usr/local/bin/composer
        register: composer_state

      - block:
        - name: get composer signature
          uri:
            url: https://composer.github.io/installer.sig
            return_content: true
          register: composer_sig

        - name: download installer
          get_url:
            url: https://getcomposer.org/installer
            dest: /tmp/composer-setup.php
            checksum: "sha384:{{ composer_sig.content }}"

        - name: install composer
          command: php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer
        when: composer_state.stat.exists == false

      - name: install php phar qa tools
        get_url:
          url: "{{ item.value }}"
          dest: "/usr/local/bin/{{ item.key }}"
          mode: 0755
        with_dict:
          behat: https://github.com/Behat/Behat/releases/download/v3.2.1/behat.phar
          phpcbf: https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar
          phpcpd: https://phar.phpunit.de/phpcpd.phar
          phpcs: https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar
          phpmd: http://static.phpmd.org/php/latest/phpmd.phar
          security-checker: http://get.sensiolabs.org/security-checker.phar
          phpunit: https://phar.phpunit.de/phpunit.phar
          symfony: https://symfony.com/installer
  become: true
